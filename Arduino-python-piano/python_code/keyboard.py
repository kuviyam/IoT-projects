# Arduino piano
# this code reads 7 digit hex values from serial port and plays corresponding notes

import os
import serial

SERIAL_PORT = '/dev/ttyACM0'
SERIAL_RATE = 115200

keystate0 = [False] * 12
keystate1 = [False] * 12
keystate2 = [False] * 12

oct_cur = 0
oct_state = False
octave_select = "4"

frequencies = {'a0': 27.5, 'a#0': 29.13523509488062, 'bb0': 29.13523509488062, 'b0': 30.867706328507758,
               'cb0': 30.867706328507758, 'c1': 32.70319566257483, 'b#1': 32.70319566257483, 'c#1': 34.64782887210901,
               'db1': 34.64782887210901, 'd1': 36.70809598967595, 'd#1': 38.890872965260115, 'eb1': 38.890872965260115,
               'e1': 41.20344461410874, 'fb1': 41.20344461410874, 'f1': 43.653528929125486, 'e#1': 43.653528929125486,
               'f#1': 46.2493028389543, 'gb1': 46.2493028389543, 'g1': 48.99942949771866, 'g#1': 51.91308719749314,
               'ab1': 51.91308719749314, 'a1': 55.0, 'a#1': 58.27047018976124, 'bb1': 58.27047018976124,
               'b1': 61.735412657015516, 'cb1': 61.735412657015516, 'c2': 65.40639132514966, 'b#2': 65.40639132514966,
               'c#2': 69.29565774421802, 'db2': 69.29565774421802, 'd2': 73.4161919793519, 'd#2': 77.78174593052023,
               'eb2': 77.78174593052023, 'e2': 82.40688922821748, 'fb2': 82.40688922821748, 'f2': 87.30705785825097,
               'e#2': 87.30705785825097, 'f#2': 92.4986056779086, 'gb2': 92.4986056779086, 'g2': 97.99885899543732,
               'g#2': 103.82617439498628, 'ab2': 103.82617439498628, 'a2': 110.0, 'a#2': 116.54094037952248,
               'bb2': 116.54094037952248, 'b2': 123.470825314031, 'cb2': 123.470825314031, 'c3': 130.8127826502993,
               'b#3': 130.8127826502993, 'c#3': 138.59131548843604, 'db3': 138.59131548843604, 'd3': 146.83238395870376,
               'd#3': 155.56349186104046, 'eb3': 155.56349186104046, 'e3': 164.813778456435, 'fb3': 164.813778456435,
               'f3': 174.61411571650194, 'e#3': 174.61411571650194, 'f#3': 184.9972113558172, 'gb3': 184.9972113558172,
               'g3': 195.99771799087466, 'g#3': 207.65234878997256, 'ab3': 207.65234878997256, 'a3': 220.0,
               'a#3': 233.08188075904496, 'bb3': 233.08188075904496, 'b3': 246.941650628062, 'cb3': 246.941650628062,
               'c4': 261.6255653005986, 'b#4': 261.6255653005986, 'c#4': 277.1826309768721, 'db4': 277.1826309768721,
               'd4': 293.6647679174075, 'd#4': 311.1269837220809, 'eb4': 311.1269837220809, 'e4': 329.62755691287,
               'fb4': 329.62755691287, 'f4': 349.2282314330039, 'e#4': 349.2282314330039, 'f#4': 369.9944227116344,
               'gb4': 369.9944227116344, 'g4': 391.9954359817493, 'g#4': 415.3046975799451, 'ab4': 415.3046975799451,
               'a4': 440.0, 'a#4': 466.1637615180898, 'bb4': 466.1637615180898, 'b4': 493.88330125612424,
               'cb4': 493.88330125612424, 'c5': 523.2511306011972, 'b#5': 523.2511306011972, 'c#5': 554.3652619537442,
               'db5': 554.3652619537442, 'd5': 587.3295358348153, 'd#5': 622.2539674441618, 'eb5': 622.2539674441618,
               'e5': 659.2551138257397, 'fb5': 659.2551138257397, 'f5': 698.4564628660079, 'e#5': 698.4564628660079,
               'f#5': 739.9888454232688, 'gb5': 739.9888454232688, 'g5': 783.9908719634984, 'g#5': 830.6093951598904,
               'ab5': 830.6093951598904, 'a5': 880.0, 'a#5': 932.3275230361796, 'bb5': 932.3275230361796,
               'b5': 987.7666025122485, 'cb5': 987.7666025122485, 'c6': 1046.5022612023945, 'b#6': 1046.5022612023945,
               'c#6': 1108.7305239074883, 'db6': 1108.7305239074883, 'd6': 1174.6590716696305,
               'd#6': 1244.5079348883237, 'eb6': 1244.5079348883237, 'e6': 1318.5102276514795,
               'fb6': 1318.5102276514795, 'f6': 1396.9129257320158, 'e#6': 1396.9129257320158,
               'f#6': 1479.9776908465376, 'gb6': 1479.9776908465376, 'g6': 1567.9817439269968,
               'g#6': 1661.2187903197807, 'ab6': 1661.2187903197807, 'a6': 1760.0, 'a#6': 1864.6550460723593,
               'bb6': 1864.6550460723593, 'b6': 1975.533205024497, 'cb6': 1975.533205024497, 'c7': 2093.004522404789,
               'b#7': 2093.004522404789, 'c#7': 2217.4610478149766, 'db7': 2217.4610478149766, 'd7': 2349.318143339261,
               'd#7': 2489.0158697766474, 'eb7': 2489.0158697766474, 'e7': 2637.020455302959, 'fb7': 2637.020455302959,
               'f7': 2793.8258514640315, 'e#7': 2793.8258514640315, 'f#7': 2959.955381693075, 'gb7': 2959.955381693075,
               'g7': 3135.9634878539937, 'g#7': 3322.4375806395615, 'ab7': 3322.4375806395615, 'a7': 3520.0,
               'a#7': 3729.3100921447185, 'bb7': 3729.3100921447185, 'b7': 3951.066410048994, 'cb7': 3951.066410048994,
               'c8': 4186.009044809578, 'b#8': 4186.009044809578}


def play_sound(duration, note):
    freq = float(frequencies[note])
    print(note)
    os.system('play -nq -t alsa synth {} sine {} &'.format(duration, freq))
    # sudo apt install sox


def play(octave_select, zero, one, two, three, four, five, six):
    global keystate0, keystate1, keystate2
    note = ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b', 'b#']

    oct0 = "000000000" + zero
    for i in range(0, 12):
        if oct0[i] == '0' and keystate0[i] == False:
            keystate0[i] = True
            play_sound(0.1, note[i] + str(int(octave_select) - 1))
        elif oct0[i] == '1':
            keystate0[i] = False

    oct1 = one + two + three
    for i in range(0, 12):
        if oct1[i] == '0' and keystate1[i] == False:
            keystate1[i] = True
            play_sound(0.1, note[i] + octave_select)
        elif oct1[i] == '1':
            keystate1[i] = False

    oct2 = four + five + six
    for i in range(0, 12):
        if oct2[i] == '0' and keystate2[i] == False:
            keystate2[i] = True
            play_sound(0.1, note[i] + str(int(octave_select) + 1))
        elif oct2[i] == '1':
            keystate2[i] = False


def main():
    global oct_cur, octave_select
    ser = serial.Serial(SERIAL_PORT, SERIAL_RATE)
    while True:
        try:
            reading = ser.readline().decode('utf-8').rstrip().upper()
            if len(reading) == 7:
                zero = str("{0:04b}".format(int(reading[0], 16)))  # SWITCH a3 a#3 b3
                one = str("{0:04b}".format(int(reading[1], 16)))  # c4 c#4 d4 d#4
                two = str("{0:04b}".format(int(reading[2], 16)))  # e4 f4 f#4 g4
                three = str("{0:04b}".format(int(reading[3], 16)))  # g#4 a4 a#4 b4
                four = str("{0:04b}".format(int(reading[4], 16)))  # c5 c#5 d5 d#5
                five = str("{0:04b}".format(int(reading[5], 16)))  # e5 f5 f#5 g5
                six = str("{0:04b}".format(int(reading[6], 16)))  # g#5 a5 a#5 b5

                # Toggle octave select switch state
                if zero[3] == '0' and oct_state == False:
                    oct_state = True
                    if (oct_cur < 1):
                        oct_cur = oct_cur + 1
                    else:
                        oct_cur = 0
                elif zero[3] == '1':
                    oct_state = False
                octave_select = str(oct_cur + 4)

                play(octave_select, zero[0:3][::-1], one[::-1], two[::-1], three[::-1],
                     four[::-1], five[::-1], six[::-1])
        except Exception as e:
            print("Exception occured", e)


if __name__ == "__main__":
    main()
